# %%
import DataGen
from pprint import pprint

# %%

# Create the dataset generator with 1000 observations
ds_generator = DataGen.DataGenerator(100000, "medical_dataset")

# Gender: Categorical with two categories ('male', 'female')
ds_generator.add_var(
    name="gender", categories=["male", "female"], base_probs=[0.5, 0.5]
)

# Age: Normally distributed, mean age 40, standard deviation 10
ds_generator.add_var(
    name="age", distribution="normal", dist_params={"loc": 40, "scale": 10}
)

# Height: Normally distributed but different for each gender.
# For males, mean height is 175 cm, standard deviation is 8.
# For females, mean height is 165 cm, standard deviation is 7.
ds_generator.add_var(
    name="height",
    categorical_var="gender",
    dist_dict={
        "male": {"dist": "normal", "params": {"loc": 175, "scale": 8}},
        "female": {"dist": "normal", "params": {"loc": 165, "scale": 7}},
    },
)

# Weight: Normally distributed but dependent on height.
# Weight = 0.9 * height - 100 + noise
ds_generator.add_var(name="weight", expression="0.9 * height - 100", noise_level=0.05)

# BMI: Calculated as weight / (height/100)^2
ds_generator.add_var(name="bmi", expression="weight / (height / 100) ** 2")

# Insurance: Categorical, either 'yes' or 'no' with different probabilities
ds_generator.add_var(name="insurance", categories=["yes", "no"], base_probs=[0.7, 0.3])

# Diabetes: Categorical ('yes', 'no') but conditionally dependent on BMI and age.
# The higher the BMI and age, the higher the chance of having diabetes.
ds_generator.add_var(
    name="diabetes",
    categories=["yes", "no"],
    base_probs=[0.1, 0.9],
    expressions=["bmi * 0.05 + age * 0.05", "1"],
    exp_level=0.5,
)

# Risk of diabetes: A numeric variable that is a function of age, bmi, and whether the person has insurance.
# Calculated as (0.3 * age + 0.5 * bmi - 5 * (insurance == 'yes'))
ds_generator.add_var(
    name="risk_of_diabetes",
    expression="0.3 * age + 0.5 * bmi - 5 * (insurance == 'yes')",
    noise_level=0.1,
)

# Save the dataset
ds_generator.save_as_csv("medical_dataset.csv")

# Output metadata
print("Dataset metadata:")
pprint(ds_generator.get_metadata())

# %%
